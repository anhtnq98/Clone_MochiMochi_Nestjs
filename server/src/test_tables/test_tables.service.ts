import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateTestTableDto } from './dto/create-test_table.dto';
import { UpdateTestTableDto } from './dto/update-test_table.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { TestTable } from './entities/test_table.entity';
import { Like, Repository } from 'typeorm';
import { Response } from 'express';

@Injectable()
export class TestTablesService {
  constructor(
    @InjectRepository(TestTable) private testTableRepo: Repository<TestTable>,
  ) {}

  async create(createTestTableDto: CreateTestTableDto, res: Response) {
    try {
      let testTable = await this.testTableRepo.findOne({
        where: { testTableName: createTestTableDto.testTableName },
      });
      if (testTable) {
        return res.status(401).json({
          message: 'Ch·ªß ƒë·∫ø n√†y ƒë√£ ƒë∆∞·ª£c th√™m r·ªìi! ‚ö†Ô∏è',
        });
      }

      let newTestTable = new TestTable(createTestTableDto);
      let addNewTestTable = this.testTableRepo.create(newTestTable);
      await this.testTableRepo.save(addNewTestTable);
      return res.status(201).json({
        message: 'Th√™m ch·ªß ƒë·ªÅ m·ªõi th√†nh c√¥ng! üçÄ',
        testTable: newTestTable,
      });
    } catch (error) {
      return res.status(404).json({
        message: 'Th√™m ch·ªß ƒë·ªÅ m·ªõi th·∫•t b·∫°i! ',
        error: error,
      });
    }
  }

  async findAll() {
    try {
      return await this.testTableRepo.find({});
    } catch (error) {
      return `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin do l·ªói ${error}`;
    }
  }

  async searchTestTable(searchValue: string) {
    try {
      return await this.testTableRepo.find({
        where: {
          testTableName: Like(`%${searchValue}%`),
        },
      });
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ch·ªß ƒë·ªÅ do l·ªói ${error}`);
    }
  }

  async findAllTestTables(testTableType: number) {
    try {
      return await this.testTableRepo.find({ where: { testTableType } });
    } catch (error) {
      return `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin do l·ªói ${error}`;
    }
  }

  async update(testTableId: number, updateTestTableDto: UpdateTestTableDto) {
    try {
      const update = await this.testTableRepo.findOneBy({ testTableId });
      if (!update) {
        throw new NotFoundException('Ch·ªß ƒë·ªÅ test n√†y kh√¥ng t·ªìn t·∫°i!');
      }

      return await this.testTableRepo.update(testTableId, {
        ...(updateTestTableDto.testTableName && {
          testTableName: updateTestTableDto.testTableName,
        }),
        ...(updateTestTableDto.testTableType && {
          testTableType: updateTestTableDto.testTableType,
        }),
      });
    } catch (error) {
      return `Kh√¥ng th·ªÉ s·ª≠a n·ªôi dung b·ªüi l·ªói ${error}`;
    }
  }

  async remove(testTableId: number) {
    try {
      let testTable = await this.testTableRepo.find({ where: { testTableId } });
      return this.testTableRepo.remove(testTable);
    } catch (error) {
      return `Kh√¥ng th·ªÉ x√≥a do l·ªói ${error}`;
    }
  }
}
